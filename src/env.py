from config import GameSettings

class Env:

    def __init__(self, config: GameSettings):
        ...

    def step(self, action):
        """
        Applies an action to the environment.

        Parameters:
        - action: The action to be taken

        Return:
        tuple[state, reward, terminated] 
        - state: The updated observed state
        - reward: The reward generated by the action
        - terminated: True if the environment has reached it's terminal state
        """
        ...

    def reset(self, seed: int = 1738):
        """
        Resets the environment to an initial state. 

        Parameters:
        - seed: Seed for randomization (optional)

        Returns:
        - observation: Initial observation of new environment
        """
        ...

    def close(self):
        """
        Cleans up the environment

        Parameters:
        None

        Returns:
        None
        """
        ...

    @property
    def action_space(self):
        """
        Returns the possible actions from the current state
        """
        return []

    @property 
    def observation_space(self):
        """
        Returns the space of possible observations

        [
            agent_x, agent_y,
            goal_x,  goal_y,
            up_x, up_y, up_length, up_width,
            down_x, down_y, down_length, down_width,
            up_x, up_y, up_length, up_width,
            up_x, up_y, up_length, up_width,
        ]
        """
        return []

